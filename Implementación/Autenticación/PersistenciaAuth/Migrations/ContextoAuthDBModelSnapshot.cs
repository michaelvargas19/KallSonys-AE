// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersistenciaAuth;

namespace PersistenciaAuth.Migrations
{
    [DbContext(typeof(ContextoAuthDB))]
    partial class ContextoAuthDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DominioAuth.Modelo.AlgoritmoDeSeguridad", b =>
                {
                    b.Property<string>("Algoritmo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Algoritmo");

                    b.ToTable("AspNetAlgoritmosDeSeguridad");

                    b.HasData(
                        new
                        {
                            Algoritmo = "EcdsaSha256",
                            Valor = "ES256"
                        },
                        new
                        {
                            Algoritmo = "EcdsaSha384",
                            Valor = "ES384"
                        },
                        new
                        {
                            Algoritmo = "EcdsaSha512",
                            Valor = "ES512"
                        },
                        new
                        {
                            Algoritmo = "HmacSha384",
                            Valor = "HS384"
                        },
                        new
                        {
                            Algoritmo = "HmacSha512",
                            Valor = "HS512"
                        },
                        new
                        {
                            Algoritmo = "None",
                            Valor = "none"
                        },
                        new
                        {
                            Algoritmo = "RsaSha256",
                            Valor = "RS256"
                        },
                        new
                        {
                            Algoritmo = "RsaSha384",
                            Valor = "RS384"
                        },
                        new
                        {
                            Algoritmo = "RsaSha512",
                            Valor = "RS512"
                        },
                        new
                        {
                            Algoritmo = "RsaSsaPssSha256",
                            Valor = "PS256"
                        },
                        new
                        {
                            Algoritmo = "RsaSsaPssSha384",
                            Valor = "PS384"
                        },
                        new
                        {
                            Algoritmo = "RsaSsaPssSha512",
                            Valor = "PS512"
                        },
                        new
                        {
                            Algoritmo = "Aes128CbcHmacSha256",
                            Valor = "A128CBC-HS256"
                        },
                        new
                        {
                            Algoritmo = "HmacSha256",
                            Valor = "HS256"
                        },
                        new
                        {
                            Algoritmo = "Aes192CbcHmacSha384",
                            Valor = "A192CBC-HS384"
                        },
                        new
                        {
                            Algoritmo = "Aes128KW",
                            Valor = "A128KW"
                        },
                        new
                        {
                            Algoritmo = "Aes256KW",
                            Valor = "A256KW"
                        },
                        new
                        {
                            Algoritmo = "RsaOAEP",
                            Valor = "RSA-OAEP"
                        },
                        new
                        {
                            Algoritmo = "Sha256",
                            Valor = "SHA256"
                        },
                        new
                        {
                            Algoritmo = "Sha384",
                            Valor = "SHA384"
                        },
                        new
                        {
                            Algoritmo = "Sha512",
                            Valor = "SHA512"
                        },
                        new
                        {
                            Algoritmo = "RsaPKCS1",
                            Valor = "RSA1_5"
                        },
                        new
                        {
                            Algoritmo = "Aes256CbcHmacSha512",
                            Valor = "A256CBC-HS512"
                        });
                });

            modelBuilder.Entity("DominioAuth.Modelo.Aplicacion", b =>
                {
                    b.Property<string>("IdAplicacion")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AlgoritmoDeSeguridad")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmailContacto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<bool>("EstadoLlave")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaExpiracionLlave")
                        .HasColumnType("datetime2");

                    b.Property<string>("LlaveSecreta")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("MinutosDeVida")
                        .HasColumnType("float");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PermiteJWT")
                        .HasColumnType("bit");

                    b.HasKey("IdAplicacion");

                    b.HasIndex("AlgoritmoDeSeguridad");

                    b.ToTable("AspNetAplicacion");

                    b.HasData(
                        new
                        {
                            IdAplicacion = "Manager",
                            AlgoritmoDeSeguridad = "HmacSha512",
                            EmailContacto = "",
                            Estado = true,
                            EstadoLlave = true,
                            FechaExpiracionLlave = new DateTime(2023, 3, 29, 16, 40, 52, 128, DateTimeKind.Local).AddTicks(2253),
                            LlaveSecreta = "",
                            MinutosDeVida = 60.0,
                            Nombre = "Account Service",
                            PermiteJWT = true
                        });
                });

            modelBuilder.Entity("DominioAuth.Modelo.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Display")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdAplicacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IdAplicacion");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "dbfd45b8-7fa6-457d-8439-3f53ebdc3b22",
                            Descripcion = "",
                            Display = "PowerUser",
                            IdAplicacion = "Manager",
                            Name = "PowerUser",
                            NormalizedName = "POWERUSER"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "e52f02f2-a553-426e-83e4-73dd07c55298",
                            Descripcion = "",
                            Display = "Administrador",
                            IdAplicacion = "Manager",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        });
                });

            modelBuilder.Entity("DominioAuth.Modelo.TipoAutenticacion", b =>
                {
                    b.Property<int>("IdTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Autenticacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsDirectorioActivo")
                        .HasColumnType("bit");

                    b.Property<int?>("IdAD")
                        .HasColumnType("int");

                    b.HasKey("IdTipo");

                    b.ToTable("AspNetTiposAutenticacion");

                    b.HasData(
                        new
                        {
                            IdTipo = 1,
                            Autenticacion = "Usuario y Contraseña",
                            EsDirectorioActivo = false
                        });
                });

            modelBuilder.Entity("DominioAuth.Modelo.Token", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaExpiracion")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirmaJWT")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdAplicacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LongitudToken")
                        .HasColumnType("int");

                    b.Property<int>("MinutosDeVida")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.HasIndex("IdAplicacion");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DominioAuth.Modelo.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cargo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("EsExterno")
                        .HasColumnType("bit");

                    b.Property<int>("IdTipoAuth")
                        .HasColumnType("int");

                    b.Property<string>("Identificacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Organizacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoAuth");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Apellidos = "",
                            Cargo = "Administrador del sistema",
                            ConcurrencyStamp = "4ab6a6a6-383e-4e3c-ac16-b3c2f9b80420",
                            Description = "Administrador del sistema de autenticación",
                            Email = "admin@admin.org.co",
                            EmailConfirmed = true,
                            EsExterno = false,
                            IdTipoAuth = 1,
                            LockoutEnabled = false,
                            Nombres = "Admin",
                            NormalizedEmail = "ADMIN@ADMIN.ORG.CO",
                            NormalizedUserName = "ADMIN",
                            Organizacion = "PUJ",
                            PasswordHash = "AQAAAAEAACcQAAAAEDvsJrU5P2uO7jfhKVQTK2rMCwYlOAoWC3AzIGB+iktmo8A2515Utzul5+KXfWEjqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "XVMFBE37LCN4TNGMZSHLPHBV7FIVHBQG",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("DominioAuth.Modelo._LogAutenticacionAPI", b =>
                {
                    b.Property<int>("IdLog")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Aplicacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Entidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsExcepcion")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metodo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parametros")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Request")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdLog");

                    b.ToTable("_LogAutenticacionAPI");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/system",
                            ClaimValue = "Manager",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/system",
                            ClaimValue = "Manager",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/authenticationmethod",
                            ClaimValue = "Usuario y Contraseña",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/streetaddress",
                            ClaimValue = "",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/uri",
                            ClaimValue = "",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/locality",
                            ClaimValue = "",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("DominioAuth.Modelo.Aplicacion", b =>
                {
                    b.HasOne("DominioAuth.Modelo.AlgoritmoDeSeguridad", "Algoritmo")
                        .WithMany("Aplicaciones")
                        .HasForeignKey("AlgoritmoDeSeguridad");

                    b.Navigation("Algoritmo");
                });

            modelBuilder.Entity("DominioAuth.Modelo.Rol", b =>
                {
                    b.HasOne("DominioAuth.Modelo.Aplicacion", "Aplicacion")
                        .WithMany("Roles")
                        .HasForeignKey("IdAplicacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aplicacion");
                });

            modelBuilder.Entity("DominioAuth.Modelo.Token", b =>
                {
                    b.HasOne("DominioAuth.Modelo.Aplicacion", "Aplicacion")
                        .WithMany()
                        .HasForeignKey("IdAplicacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DominioAuth.Modelo.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aplicacion");
                });

            modelBuilder.Entity("DominioAuth.Modelo.Usuario", b =>
                {
                    b.HasOne("DominioAuth.Modelo.TipoAutenticacion", "TipoAutenticacion")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdTipoAuth")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoAutenticacion");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("DominioAuth.Modelo.Rol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DominioAuth.Modelo.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DominioAuth.Modelo.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("DominioAuth.Modelo.Rol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DominioAuth.Modelo.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DominioAuth.Modelo.AlgoritmoDeSeguridad", b =>
                {
                    b.Navigation("Aplicaciones");
                });

            modelBuilder.Entity("DominioAuth.Modelo.Aplicacion", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("DominioAuth.Modelo.TipoAutenticacion", b =>
                {
                    b.Navigation("Usuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
